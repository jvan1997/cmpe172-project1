{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports', 'react', 'prop-types'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require('react'), require('prop-types'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.react, global.propTypes);\n    global.pagination = mod.exports;\n  }\n})(this, function (exports, _react, _propTypes) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _react2 = _interopRequireDefault(_react);\n\n  var _propTypes2 = _interopRequireDefault(_propTypes);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var GridPaging = function (_React$Component) {\n    _inherits(GridPaging, _React$Component);\n\n    function GridPaging(props) {\n      _classCallCheck(this, GridPaging);\n\n      var _this = _possibleConstructorReturn(this, (GridPaging.__proto__ || Object.getPrototypeOf(GridPaging)).call(this, props));\n\n      _this.state = {\n        displayedPages: []\n      };\n      _this.setDisplayedPages = _this.setDisplayedPages.bind(_this);\n      _this.handleClickPage = _this.handleClickPage.bind(_this);\n      _this.handleClickShowPrevious = _this.handleClickShowPrevious.bind(_this);\n      _this.handleClickShowNext = _this.handleClickShowNext.bind(_this);\n      _this.renderPage = _this.renderPage.bind(_this);\n      return _this;\n    }\n\n    _createClass(GridPaging, [{\n      key: 'componentWillMount',\n      value: function componentWillMount() {\n        this.setDisplayedPages(this.props);\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        this.setDisplayedPages(nextProps);\n      }\n    }, {\n      key: 'getIntArray',\n      value: function getIntArray(min, max) {\n        var result = [];\n\n        for (; min < max; ++min) {\n          result.push(min);\n        }\n\n        return result;\n      }\n    }, {\n      key: 'setDisplayedPages',\n      value: function setDisplayedPages(props) {\n        if (!props.pagination && props.pagination.ready()) return null;\n        var pageCount = props.pagination.totalPages();\n        var current = props.pagination.currentPage();\n        var min = 0;\n        var displayedPages = this.state.displayedPages;\n\n        if (pageCount > props.limit) {\n          if (current > props.limit / 2) {\n            if (current > pageCount - props.limit / 2) {\n              min = pageCount - props.limit;\n            } else {\n              min = Math.floor(current - props.limit / 2);\n            }\n          }\n\n          displayedPages = this.getIntArray(min + 1, min + 1 + props.limit);\n        } else {\n          displayedPages = this.getIntArray(1, pageCount + 1);\n        }\n\n        if (displayedPages !== this.state.displayedPages) {\n          this.setState({\n            displayedPages: displayedPages\n          });\n        }\n\n        return false;\n      }\n    }, {\n      key: 'handleClickPage',\n      value: function handleClickPage(page, event) {\n        var pagination = this.props.pagination;\n        if (!pagination || !pagination.totalPages) return null;\n\n        if (page > 0 && page <= pagination.totalPages()) {\n          pagination.currentPage(page);\n        }\n\n        event.preventDefault();\n        return false;\n      }\n    }, {\n      key: 'handleClickShowPrevious',\n      value: function handleClickShowPrevious(event) {\n        var min = Math.max(1, this.state.displayedPages[0] - this.props.limit);\n        var displayedPages = this.getIntArray(min, min + this.props.limit);\n\n        if (displayedPages !== this.state.displayedPages) {\n          this.setState({\n            displayedPages: displayedPages\n          });\n        }\n\n        event.preventDefault();\n      }\n    }, {\n      key: 'handleClickShowNext',\n      value: function handleClickShowNext(event) {\n        var pagination = this.props.pagination;\n        if (!pagination || !pagination.totalPages) return null;\n        var pageCount = pagination.totalPages();\n        var min = 1 + Math.min(pageCount - this.props.limit, this.state.displayedPages[this.state.displayedPages.length - 1]);\n        var displayedPages = this.getIntArray(min, min + this.props.limit);\n\n        if (displayedPages !== this.state.displayedPages) {\n          this.setState({\n            displayedPages: displayedPages\n          });\n        }\n\n        event.preventDefault();\n        return false;\n      }\n    }, {\n      key: 'renderPage',\n      value: function renderPage(page) {\n        var pagination = this.props.pagination;\n        if (!pagination || !pagination.currentPage) return null;\n        var liClass = 'page-item' + (pagination.currentPage() === page ? ' active' : '');\n        return _react2.default.createElement('li', {\n          key: 'page ' + page,\n          className: liClass\n        }, _react2.default.createElement('a', {\n          href: '#',\n          className: 'page-link',\n          title: 'Go to page ' + page,\n          onClick: this.handleClickPage.bind(this, page)\n        }, page));\n      }\n    }, {\n      key: 'renderFirstPage',\n      value: function renderFirstPage() {\n        if (this.state.displayedPages.length && this.state.displayedPages[0] > 1) {\n          return this.renderPage(1);\n        }\n\n        return null;\n      }\n    }, {\n      key: 'renderPreviousPages',\n      value: function renderPreviousPages() {\n        if (this.state.displayedPages.length && this.state.displayedPages[0] > 2) {\n          return _react2.default.createElement('li', {\n            className: 'page-item'\n          }, _react2.default.createElement('a', {\n            href: '#',\n            className: 'page-link show-prev',\n            title: 'Show previous pages',\n            onClick: this.handleClickShowPrevious\n          }, '...'));\n        }\n\n        return null;\n      }\n    }, {\n      key: 'renderNextPages',\n      value: function renderNextPages() {\n        var pagination = this.props.pagination;\n        if (!pagination || !pagination.totalPages) return null;\n\n        if (this.state.displayedPages.length && this.state.displayedPages[this.state.displayedPages.length - 1] < pagination.totalPages() - 1) {\n          return _react2.default.createElement('li', {\n            className: 'page-item'\n          }, _react2.default.createElement('a', {\n            href: '#',\n            className: 'page-link show-prev',\n            title: 'Show next pages',\n            onClick: this.handleClickShowNext\n          }, '...'));\n        }\n\n        return null;\n      }\n    }, {\n      key: 'renderLastPage',\n      value: function renderLastPage() {\n        var pagination = this.props.pagination;\n        if (!pagination || !pagination.totalPages) return null;\n\n        if (this.state.displayedPages.length && this.state.displayedPages[this.state.displayedPages.length - 1] < pagination.totalPages()) {\n          return this.renderPage(pagination.totalPages());\n        }\n\n        return null;\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var pagination = this.props.pagination;\n        var containerClass = 'pagination-container';\n\n        if (this.props.containerClass.length) {\n          containerClass += ' ' + this.props.containerClass;\n        }\n\n        if (!pagination || !pagination.ready() || pagination.totalPages() <= 1 || !this.props.limit) {\n          return _react2.default.createElement('div', {\n            className: containerClass\n          });\n        }\n\n        return _react2.default.createElement('div', {\n          className: containerClass\n        }, _react2.default.createElement('ul', {\n          className: 'pagination'\n        }, _react2.default.createElement('li', {\n          className: 'page-item ' + (pagination.currentPage() === 1 ? 'disabled' : '')\n        }, _react2.default.createElement('a', {\n          href: '#',\n          className: 'page-link previous-page',\n          title: 'Previous page',\n          onClick: this.handleClickPage.bind(this, pagination.currentPage() - 1)\n        }, ' < ')), this.renderFirstPage(), this.renderPreviousPages(), this.state.displayedPages.map(this.renderPage), this.renderNextPages(), this.renderLastPage(), _react2.default.createElement('li', {\n          className: 'page-item ' + (pagination.currentPage() === pagination.totalPages() ? 'disabled' : '')\n        }, _react2.default.createElement('a', {\n          href: '#',\n          className: 'page-link next-page',\n          title: 'Next page',\n          onClick: this.handleClickPage.bind(this, pagination.currentPage() + 1)\n        }, ' > '))));\n      }\n    }]);\n\n    return GridPaging;\n  }(_react2.default.Component);\n\n  exports.default = GridPaging;\n  GridPaging.propTypes = {\n    error: _propTypes2.default.any,\n    pagination: _propTypes2.default.object,\n    pageCount: _propTypes2.default.number,\n    limit: _propTypes2.default.number,\n    page: _propTypes2.default.number,\n    containerClass: _propTypes2.default.string\n  };\n  GridPaging.defaultProps = {\n    containerClass: '',\n    limit: 10,\n    pagination: null\n  };\n});","map":null,"metadata":{},"sourceType":"script"}